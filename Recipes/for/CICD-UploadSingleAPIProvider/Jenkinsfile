pipeline {
  agent any

  //Configure the following environment variables before executing the Jenkins Job
  environment {
    APIProviderName = "Northwind_APIs"
    IsDeleteRequired = "Yes" //Assign "Yes", in case the artefact has to be deleted from the API Portal before uploading the artefact from Git. Else set it to "No"
    APIPortalHost = "${env.API_HOST}"
    APIPortalOAuthHost = "${env.API_OAUTH_HOST}"
    APIPortalOAuthCredentials = "${env.API_OAUTH_CRED}"
    GITRepositoryURL = "${env.GIT_REPOSITORY_URL}"
    GITCredentials = "${env.GIT_CRED}"
    GITBranch = "${env.GIT_BRANCH_NAME}"
    GITFolder = "IntegrationContent/API"
  }

  stages {

    stage('Clone Git Repository to Workspace') {
      steps {
        script {
          //Delete workspace before cloning from Git
          println '**** Delete workspace before cloning from Git ****';
          deleteDir();

          //Checkout from Git
          checkout([
            $class: 'GitSCM',
            branches: [
              [name: env.GITBranch]
            ],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
              [$class: 'RelativeTargetDirectory', relativeTargetDir: "."],
              [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                [$class: 'SparseCheckoutPath', path: "${env.GITFolder}"]
              ]]
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
              [
                credentialsId: env.GITCredentials,
                url: 'https://' + env.GITRepositoryURL
              ]
            ]
          ])
        }
      }
    }

    stage('Generate API Portal OAuth Bearer token') {
      steps {
        script {
          //Generate API Portal OAuth Bearer token
          println '**** Generate API Portal OAuth Bearer token ****';
          try {
            def getTokenResp = httpRequest acceptType: 'APPLICATION_JSON',
              authentication: env.APIPortalOAuthCredentials,
              contentType: 'APPLICATION_JSON',
              httpMode: 'POST',
              ignoreSslErrors: true,
              responseHandle: 'LEAVE_OPEN',
              timeout: 30,
              url: 'https://' + env.APIPortalOAuthHost + '/oauth/token?grant_type=client_credentials'
            def jsonObj = readJSON text: getTokenResp.content
            def token_s1 = 'bearer' + ' ' + jsonObj.access_token
            env.token = token_s1
            getTokenResp.close();
          } catch (Exception e) {
              error("Bearer token generation failed:\n${e}")
          }
        }
      }
    }

    stage('Check for API Provider file in workspace after Git Clone') {
      steps {
        script {
          try {
            def apip = readJSON file: (env.GITFolder + '//' + env.APIProviderName + '.json')
            env.payload = apip.toString()
          } catch (Exception e) {
              error("Specified API Provider file " + env.APIProviderName + ".json is not available in Git Repository:\n${e}")
          }
        }
      }
    }

    stage('Delete API Provider -- Optional step') {
      steps {
        script {
          //Delete API Provider from API Portal if configured
          println '**** Delete API Provider from API Portal if configured ****'

          if (env.IsDeleteRequired.equalsIgnoreCase('Yes')) {
            def checkResp = null
            try {
              //API call to check if API Provider has an associated API Proxy
              println '**** API call to check if API Provider has an associated API Proxy ****'
              def APIProxy = httpRequest acceptType: 'APPLICATION_JSON',
                contentType: 'APPLICATION_JSON',
                httpMode: 'GET',
                ignoreSslErrors: true,
                responseHandle: 'LEAVE_OPEN',
                customHeaders: [
                  [maskValue: true, name: 'Authorization', value: env.token]
                ],
                timeout: 30,
                url: "https://" + env.APIPortalHost + '/apiportal/api/1.0/Management.svc/APIProviders(name=' + '\'' + env.APIProviderName + '\'' + ')/apiProxies'

              checkResp = readJSON text: APIProxy.content
              APIProxy.close();
            } catch (Exception e) {
              error("Call to check if API Provider has an associated API Proxy failed:\n${e}")
            }
            
            //Associated API Proxy check
            def results = ((checkResp.d.results).toString()).contains(env.APIProviderName)
            if (results) {
              env.continueExecution = "false"
              error("API Provider has an associated API Proxies. Delete & Re-creation stages skipped")
            }

            if (env.continueExecution != "false") {
              try {
                //Delete API Provider
                println '**** Delete API Provider ****'
                def DeleteAPIProvider = httpRequest acceptType: 'APPLICATION_JSON',
                  contentType: 'APPLICATION_JSON',
                  httpMode: 'DELETE',
                  ignoreSslErrors: true,
                  responseHandle: 'LEAVE_OPEN',
                  customHeaders: [
                    [maskValue: true, name: 'Authorization', value: env.token]
                  ],
                  timeout: 30,
                  url: "https://" + env.APIPortalHost + '/apiportal/api/1.0/Management.svc/APIProviders(' + '\'' + env.APIProviderName + '\'' + ')'

                DeleteAPIProvider.close();
              } catch (Exception e) {
                error("API Provider DELETE call failed:\n${e}")
              }
            }
          }
        }
      }
    }

    stage('Create API Provider') {
      steps {
        script {
          if (env.continueExecution != "false") {
            //Create API Provider
            println '**** Create API Provider ****';
            def CreateAPIProvider = httpRequest acceptType: 'APPLICATION_JSON',
                contentType: 'APPLICATION_JSON',
                httpMode: 'POST',
                requestBody: env.payload,
                ignoreSslErrors: true,
                validResponseCodes: '100:399,400',
                responseHandle: 'LEAVE_OPEN',
                customHeaders: [
                  [maskValue: true, name: 'Authorization', value: env.token]
                ],
                timeout: 30,
                url: "https://" + env.APIPortalHost + '/apiportal/api/1.0/Management.svc/APIProviders'
                
              def createCallResp = readJSON text: CreateAPIProvider.content
              CreateAPIProvider.close();
              
              //Delete workspace
              deleteDir()

              if(createCallResp.error.toString()!="null") {
                def response = createCallResp.error.message.value
                if(response.toString().toLowerCase().contains("Entity already exists")) {
                  error(response.toString())
                }else {
                  error("API Provider Create call failed with \""+ response.toString() + "\"")
              }
            } 
          }
        }
      }
    }
  }
}
